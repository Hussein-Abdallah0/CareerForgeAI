name: Staging Deployment Pipeline

on:
  push:
    branches: [staging]

env:
  BACKEND_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/laravel-app-backend
  FRONTEND_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/laravel-app-frontend
  NODE_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/laravel-app-node
  TAG: staging

jobs:
  build-push-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Build and push backend
        run: |
          docker build -t $BACKEND_IMAGE:$TAG ./backend
          docker push $BACKEND_IMAGE:$TAG

  build-push-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Build and push frontend
        run: |
          docker build --no-cache \
            --build-arg VITE_OPENAI_API_KEY=${{ secrets.FRONTEND_API_TOKEN }} \
            --build-arg VITE_NODE_API_URL=${{ secrets.VITE_NODE_API_URL }} \
            --build-arg VITE_LARAVEL_API_URL=${{ secrets.VITE_LARAVEL_API_URL }} \
            --build-arg VITE_NODE_WS_URL=${{ secrets.VITE_NODE_WS_URL}} \
            -t $FRONTEND_IMAGE:$TAG ./frontend
          docker push $FRONTEND_IMAGE:$TAG

  build-push-node:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Build and push node
        run: |
          docker build \
            --build-arg OPENAI_API_KEY=${{ secrets.NODE_API_TOKEN }} \
            -t $NODE_IMAGE:$TAG ./node-server
          docker push $NODE_IMAGE:$TAG

  deploy:
    needs: [build-push-backend, build-push-frontend, build-push-node]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Add known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan ${{ secrets.STAGING_HOST }} >> ~/.ssh/known_hosts
      - name: Deploy to staging
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -euxo pipefail  # Enable debugging

            # Force-clean existing directory if invalid
            if [ -d /var/www/fullstack-staging ] && [ ! -d /var/www/fullstack-staging/.git ]; then
              echo "Cleaning invalid repository..."
              sudo rm -rf /var/www/fullstack-staging
            fi

            if [ ! -d /var/www/fullstack-staging ]; then
              echo "--- Initial Server Setup ---"
              sudo apt-get update
              sudo apt-get install -y git curl

              # Create the directory and set proper permissions
              sudo mkdir -p /var/www/fullstack-staging
              sudo chown -R $USER:$USER /var/www/fullstack-staging

              # Clone with retry logic
              for i in {1..3}; do
                git clone https://${{ secrets.GH_TOKEN }}@github.com/Hussein-Abdallah0/CareerForgeAI.git \
                  /var/www/fullstack-staging && break || sleep 15
              done

              # Verify clone success
              if [ ! -d /var/www/fullstack-staging/.git ]; then
                echo "Failed to clone repository after 3 attempts"
                exit 1
              fi

              # Run setup script
              sudo bash /var/www/fullstack-staging/server-setup.sh
            fi

            # Regular deployment
            cd /var/www/fullstack-staging
            git config --global --add safe.directory /var/www/fullstack-staging

            git reset --hard HEAD
            git clean -fd
            git pull origin staging --no-rebase

            cat > .env <<EOF
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            BACKEND_IMAGE=${{ secrets.DOCKER_HUB_USERNAME }}/laravel-app-backend
            FRONTEND_IMAGE=${{ secrets.DOCKER_HUB_USERNAME }}/laravel-app-frontend
            NODE_IMAGE=${{ secrets.DOCKER_HUB_USERNAME }}/laravel-app-node
            TAG=staging
            NODE_API_TOKEN=${{ secrets.NODE_API_TOKEN }}
            EOF

            sudo dc down --timeout 30
            sudo dc pull
            sudo dc up -d

            sleep 10  # Wait for services
            sudo dc exec -T backend php artisan migrate --force
